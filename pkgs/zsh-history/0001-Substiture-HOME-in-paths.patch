From ee061367428f674242ea3e6ec8d68461874fd1d7 Mon Sep 17 00:00:00 2001
From: Christian Kampka <christian@kampka.net>
Date: Mon, 13 Aug 2018 20:25:44 +0200
Subject: [PATCH] Substiture HOME in paths

---
 cmd/config.go      |  2 +-
 cmd/edit.go        |  2 +-
 cmd/sync.go        |  2 +-
 config/config.go   | 67 +++++++++++++++++++++++++++++++++++++++++++++++-------
 history/history.go | 17 ++++++++++----
 history/sync.go    |  2 +-
 6 files changed, 76 insertions(+), 16 deletions(-)

diff --git a/cmd/config.go b/cmd/config.go
index 7abf4ec..8e133c2 100644
--- a/cmd/config.go
+++ b/cmd/config.go
@@ -24,7 +24,7 @@ var (
 )
 
 func conf(cmd *cobra.Command, args []string) error {
-	tomlfile := config.Conf.Core.TomlFile
+	tomlfile := config.Conf.Core.TomlFile.Abs()
 	if tomlfile == "" {
 		dir, _ := config.GetDefaultDir()
 		tomlfile = filepath.Join(dir, "config.toml")
diff --git a/cmd/edit.go b/cmd/edit.go
index 3b36674..f61f8cc 100644
--- a/cmd/edit.go
+++ b/cmd/edit.go
@@ -14,7 +14,7 @@ var editCmd = &cobra.Command{
 }
 
 func edit(cmd *cobra.Command, args []string) error {
-	path := config.Conf.History.Path
+	path := config.Conf.History.Path.Abs()
 	if path == "" {
 		return cli.ErrConfigHistoryPath
 	}
diff --git a/cmd/sync.go b/cmd/sync.go
index 5280f1c..4d2f392 100644
--- a/cmd/sync.go
+++ b/cmd/sync.go
@@ -58,7 +58,7 @@ func sync(cmd *cobra.Command, args []string) error {
 }
 
 func skipSyncFor(interval time.Duration) bool {
-	file := filepath.Join(filepath.Dir(config.Conf.Core.TomlFile), ".sync")
+	file := filepath.Join(filepath.Dir(config.Conf.Core.TomlFile.Abs()), ".sync")
 	f, err := os.OpenFile(file, os.O_RDONLY|os.O_CREATE, 0600)
 	if err != nil {
 		// Doesn't skip if some errors occur
diff --git a/config/config.go b/config/config.go
index e9ce985..6fcd017 100644
--- a/config/config.go
+++ b/config/config.go
@@ -2,13 +2,61 @@ package config
 
 import (
 	"fmt"
+	"log"
 	"os"
+	"os/user"
 	"path/filepath"
 	"runtime"
+	"strings"
 
 	"github.com/BurntSushi/toml"
 )
 
+type Path struct {
+	path string
+}
+
+func NewPath(path string) Path {
+	p := Path{path: path}
+	return p
+}
+
+func (p *Path) UnmarshalText(text []byte) error {
+	p.path = string(text)
+	return nil
+}
+
+func (p *Path) MarshalText() (text []byte, err error) {
+	return []byte(p.path), nil
+}
+
+func (p *Path) Abs() string {
+	path := p.path
+
+	if strings.HasPrefix(path, "~/") || strings.HasPrefix(path, "$HOME/") {
+		home := ""
+		if home = os.Getenv("HOME"); home == "" {
+			user, err := user.Current()
+			if err != nil {
+				log.Fatalf("Failed to get user home and $HOME not set.")
+			}
+			home = user.HomeDir
+		}
+
+		if home == "" {
+			log.Fatalf("Failed to get user home and $HOME not set.")
+		}
+
+		if strings.HasPrefix(path, "~/") {
+			path = strings.Replace(path, "~/", home+"/", 1)
+		}
+		if strings.HasPrefix(path, "$HOME/") {
+			path = strings.Replace(path, "$HOME/", home+"/", 1)
+		}
+	}
+	return path
+}
+
 type Config struct {
 	Core    CoreConfig    `toml:"core"`
 	History HistoryConfig `toml:"history"`
@@ -21,14 +69,15 @@ type Config struct {
 type CoreConfig struct {
 	Editor    string `toml:"editor"`
 	SelectCmd string `toml:"selectcmd"`
-	TomlFile  string `toml:"tomlfile"`
+	TomlFile  Path   `toml:"tomlfile"`
 }
 
 type HistoryConfig struct {
-	Path     string     `toml:"path"`
-	Ignores  []string   `toml:"ignore_words"`
-	Sync     SyncConfig `toml:"sync"`
-	UseColor bool       `toml:"use_color"`
+	Path       Path       `toml:"path"`
+	BackupPath Path       `toml:"backup_path"`
+	Ignores    []string   `toml:"ignore_words"`
+	Sync       SyncConfig `toml:"sync"`
+	UseColor   bool       `toml:"use_color"`
 }
 
 type SyncConfig struct {
@@ -79,7 +128,7 @@ func GetDefaultDir() (string, error) {
 }
 
 func (cfg *Config) Save() error {
-	f, err := os.OpenFile(cfg.Core.TomlFile, os.O_RDWR|os.O_CREATE, 0644)
+	f, err := os.OpenFile(cfg.Core.TomlFile.Abs(), os.O_RDWR|os.O_CREATE, 0644)
 	if err != nil {
 		return err
 	}
@@ -112,9 +161,11 @@ func (cfg *Config) LoadFile(file string) error {
 		cfg.Core.Editor = "vim"
 	}
 	cfg.Core.SelectCmd = "fzf-tmux --multi:fzf --multi:peco"
-	cfg.Core.TomlFile = file
+	cfg.Core.TomlFile = NewPath(file)
+
+	cfg.History.Path = NewPath(filepath.Join(dir, "history.ltsv"))
+	cfg.History.BackupPath = NewPath(filepath.Join(dir, ".backup"))
 
-	cfg.History.Path = filepath.Join(dir, "history.ltsv")
 	cfg.History.Ignores = []string{}
 	cfg.History.UseColor = false
 	cfg.History.Sync.ID = ""
diff --git a/history/history.go b/history/history.go
index 62a25bd..c9c614a 100644
--- a/history/history.go
+++ b/history/history.go
@@ -2,6 +2,7 @@ package history
 
 import (
 	"bufio"
+	"fmt"
 	"io"
 	"os"
 	"path/filepath"
@@ -21,7 +22,7 @@ type History struct {
 
 func Load() (h *History, err error) {
 	var records []Record
-	path := config.Conf.History.Path
+	path := config.Conf.History.Path.Abs()
 	h = &History{Records: Records{}, Path: path}
 
 	file, err := os.Open(path)
@@ -73,10 +74,18 @@ func (h *History) Backup() (err error) {
 		return nil
 	}
 
-	dir, err := config.GetDefaultDir()
-	if err != nil {
-		return
+	dir := ""
+	p := config.Conf.History.BackupPath
+	fmt.Printf("Backup path before: '%s'", p.Abs())
+	if p.Abs() != "" {
+		dir = p.Abs()
+	} else {
+		dir, err = config.GetDefaultDir()
+		if err != nil {
+			return err
+		}
 	}
+	fmt.Printf("Backup path afterr: '%s'", dir)
 
 	dir = filepath.Join(dir, ".backup", time.Now().Format("2006/01/02"))
 	err = os.MkdirAll(dir, 0700)
diff --git a/history/sync.go b/history/sync.go
index 03a54ca..3e17a20 100644
--- a/history/sync.go
+++ b/history/sync.go
@@ -116,7 +116,7 @@ func (h *History) getGistID() (id string, err error) {
 
 	for _, item := range items {
 		for _, file := range item.Files {
-			if *file.Filename == filepath.Base(config.Conf.History.Path) {
+			if *file.Filename == filepath.Base(config.Conf.History.Path.Abs()) {
 				id = *item.ID
 				break
 			}
-- 
2.16.4

